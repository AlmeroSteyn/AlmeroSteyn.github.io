Slide 0

Welcome to today's matinee feature. A tale of murder so foul that only the bravest dare to watch any further.


Slide 1 

This tragedy is brought to you by Almero Steyn who goes by the tweet name of @kryptos_rsa


Slide 2 

Gather close, all ye with courage. For today's tale is fraught with misadventure.


Slide 3

Meet our heroic developer...


Slide 4

**


Slide 5

...who, on a warm sunny day, finds the wonderful world of coding...


Slide 6

**


Slide 7

...a world where droves of good tooling abound.


Slide 8 

From this treasure our hero selects <Fancy Tags>...


Slide 9

**


Slide 10

..a tool so powerful, that an abundance of websites appear in no time at all!


Slide 11

Until the day they hear a rumour that many cannot use their sites!


Slide 12

**


Slide 13

Our hero is not hindered, they will learn about this accessibility magic!


Slide 14

So they scour the digitial lands from east to west...


Slide 15

**


Slide 16

...but there is little to find...


Slide 17

**


Slide 18

..particularly, information relating to <FancyTags />.


Slide 19

So they turn to the great Oracle of Tweet...


Slide 20

**


Slide 21

...and ask. "How can I make accessible magic with <FancyTags />?"


Slide 22

Then the Oracle speaks, with great condemnation...


Slide 23

**


Slide 24

"Thou should already knowest this!"


Slide 25

"Only on a site of The Great Static HTML is accessibility to be found"


Slide 26

"Thy framework is not accessible! Thine quest is doomed to fail!"


Slide 27

Our hero is crushed. This cannot be!


Slide 28

**


Slide 29

"All my training cannot be for nothing!"


Slide 30

"All my peers do not speak false!"


Slide 31

No! It is this accessibility magic that is false!"


Slide 32

**


Slide 33

"I shall not be thwarted, I shall continue on the path I know!"


Slide 34

**


Slide 35

And so our hero returns to the beginning of this misadventure...


Slide 36

with accessibility doomed to die.


Slide 37

**


Slide 38

The end...


Slide 39

Well folks this may have been only a story but I experienced something similar. Usually I like to talk about technical issues but there seems to be a barrier to accessibility that will take more than code to solve.

Luckily my interest in accessibility was so strong that my story ended far happier than the tragedy we just witnessed.

So I'd like to share a bit about my history with you.


Slide 40

A long time ago, well it feels like a long time ago, I was a professonal scientist. I was a laboratory chemist. I also have an education in computer science but I ended up in a lab. And here I need to bust the long held myth. On the picture we see a lot of coloured flasks connected with intricate glassware, but in a real research lab this rarely happens. But I guess it is not so glamouraous to say that some of my most complex reactions happened in a vial as big as my thumb containing a vile yellow liquid.

But I digress, the point is that I did not start my professional life as a coder. And that is important cause coders come from all walks of life and brings that experience with them. So assuming that someone knows something or was told of its existance can end up in disappointment.

Slide 41

When my colleagues heard I had some computer science training I was instantly handed the laboratory database. And I had to wing my way in writing applications to analyse some sample data.I loved it so much that eventually I made a career switch into programming. For years I coded on various platforms and the silent truth is that it took me almost 15 years to even hear that the concept of accessibility existed!

Yes I sense some of you looking as shocked as the monkeys on the screen but it is it true.

I myself have written tweets about accessibility being part of your job when you are a front end developer. But when I see these kind of tweets and write it myself it is with what I know now. I know it is an inescapable part of what we do. But should I feel guilty about all the years I did not know about accessibility? How is one to just know all about something you never hear about?

Slide 42

As a developer you have to work so hard to remain relevant. There are even complete conference talks about JavaScript fatigue these days, it is that much of a thing. I know what in my case I spent my time on things that was either important to my job at hand or important to me.

When the penny did drop for me, so to speak, it became important. Only then did I invest the time it deserved.

Slide 43

I became aware of accessibility because I worked on a project where it was taken seriously. Education was provided to team members about the importance of it. And reald world examples given. That was what made it real for me. This was actually related to a real world problem. Not simply a set of rules to follow or a stick to avoid. No, this affected real people.

When that because apparent I DID invest the time and soon I was fighting hard for accessibility to happen. And when my time on the project ended I kept on fighting on the next, and the next.

This can be very hard. In teams where inclusive design is not yet appreciated it takes a lot to stand up for it.

During that time I also learnt that a  very strong armed approach to accessibility often pushed developers further away. It took me a long time to find a balance between knowing it should happen but realising that not everyone finds it as important as me yet.

This is something I am still working on.

Slide 44

However one of my biggest surprises in this new world of accessibility was, that as a coder who loved working in modern front end technology, I sometimes had to deal with what seeming "attacks" from accessibility folk.

Were they meant as attacks? I am sure no. Just like I have oftened strong armed people about accessibility when I meant it well.

But it did make me doubt. I mean was I part of the accessibility crowd now? Were we are all working together? Sometimes entire conversations ended up in defending the technology I am using. I was hungry for accessibility information but in these conversations I found little of that.

And even to this day when I hear something like "That website is inaccessible because of React" I still need to think carefully about my next reply even though I now know it is probably not meant as an attack.

Over time this has made me think that inclusiveness is not just about creating a website everyone can use, but it also extends to

Slide 45

technology inclusion.

As someone who came to accessibility from being a front end framework developer first, I often got the idea that in order for a site to be accessible it had to be build in static HTML and maybe some vanilla JavaScript.

Now, it is 100% correct that these sites are often easier to make accessible and will work on a wider range of devices out there, for example on devices that do not support JavaScript, but perhaps we could be more inclusive of other technologies and recognise the niche that they fill.

Excluding others' technology choices off the batt often has negative consequenses.

Slide 46

Let's look at a real word example.

Slide 47

Very recently something happened on Twitter. As I tell the story, or maybe even by seeing the conversation on this slide, ir may already be familiar to you. Well, it started with a tweet by Max Stoiber, a well known figure in the React comunity and creator of the Styled Components library. He posted a simple CSS question. Given a CSS class called red that applies the color red and a CSS class called blue that applies the color blue, what would the resultant colour be for two HTML divs. The HTML divs each had the classes applied in the opposite order. The correct answer, of course, was blue, due to the CSS cascade. However, out of almost 15 000 responses to the poll, only 43% answered correctly.

Responding to such a result has to be done with great care. However, this being social media, it wasn't. The opinion of the CSS-in-JS proponents was that this was a perfect advertisement of why CSS-in-JS was necessary as it abstracts the complexity away for the developer while the pure CSS proponents felt that this was a perfect example of how CSS-in-JS fails as it keeps people from learning CSS and people should understand it.

Both groups had an element of truth, I believe. Front end developers should know the CSS cascade if you are going to use it, even in styled components, as it will make you much more effective and not totally out at sea when you venture out of that stack. While it is a great thing to use productivity boostter technology if you can. Just because you understand something does not mean you need to code it over and over and over again.

But the conversation went something along these lines:

Slide 48

Now the diclaimer here is that this is totally edited and even though it seems here that the CSS crowd started the fight it wasn't the case, as these kind of social media arguments usually erupt like a carpet bomb but I have to start somewhere so....

"You cannot call yourself a web developer if you only do CSS-in-JS and don't know the CSS cascade!" said The CSS crowd

Slide 49
Shots fired shot fired!

"Oh really? I don't even want to learn your archaic knowledge anyway, we work with the real web technologies!" said The JS crowd

A hit a very palpable hit!

Slide 50
The reaction to this was the following.

"How can you say that my knowledge does not matter?" said The CSS crowd

Slide 51

"How can you say that my knowledge does not matter?" said The JS crowd

Slide 52
Can you guess what happened then?

On the screen there is a picture of four guys. Clearly a re-enactment but they are all dressed in medieval battle gear and they are really getting into the spirit of things. Guy one is storming guy two who has is pike ready by guy three is hacking at guy one's leg with his axe while guy four is bringing up the rear leaving an obviously dead guy five behind on the battle field.

That is what Twitter looked like...for days.

Tempers flared up, people accused others then went ahead and did the same thing they accused other of and in general each group belittled the other group's knowlegde and technology. Can you guess what the netto effect of this was?

Slide 53:

Well this screen shows a pie chart of the knowledge transfer which happened then. It is based on a very carefully crafted mathematical model of that day. Plotted carefully for your viewing pleasure. And it clearly shows that a grand total of 0% knowledge got transfered between the warring factions. Can anyone guess why?

Slide 54:

It is because our gained knowledge and skills are very dear to us. It takes a lot of time and effort to become proficient at something. So if someone completely brushes this aside people tend to go on the defensive. Because no one want to hear that their knowledge is irrelevant.

Slide 55:

And when people are in defence mode all cooperation stops. All effort is invested in defending what you hold dear while the actual issues at hand needs to take the bucket of popcorn and go and sit on the sidelines to watch the ensuing battle.

Slide 56:

So what can we do? How can we defuse these kind of situations without stepping on too many toes while still adressing the issue at hand?

Here is an example of a response to that very same CSS thread on Twitter. It comes from Sarah Drassner, another prominent figure of the front end community. She said:

Did anyone else find the results of the poll depressing? Regardless of the tools, understanding styles is important for being able to build Frontend experiences and this was a pretty basic question. Do we not have sufficient learning resource for people?

This already hinted at the direction she wanted to go in. But she clarified later with a second response:

For those saying this is eletist, I'n not sure why asking if people need more learning resources is being percieved that way, I would make them!

If 60% of 14K respondents didn't understand a for loop would you feel the same way? I'm not blaming the devs, our education is busted.

This is right on target. She adressed the problem, did not mince words about it but instead of finger pointing she tried to identify the actual issue at hand and how to solve it!

And not only that but she offererd to be an active part of the solution.

Slide 57

Because developers need real solutions for real problems.

It is completely fine to highlight a problem or challenge as long as one also hint at the way to solve this.

And there is a real need for accessibility solutions in front end technologies that are not static HTML and vanilla JS.

Believe me, I have often spent a lot of time looking for them. I love accessibility but have sometimes experiences such frustration in not finding the information needed.

Could our a11y education be a little busted too?

Slide 58

But why should we care?

Let's have a reality check about these front end frameworks.

Slide 59

These tools are gainign popularity in a big way. And I mean in a big way.

Not only that but spin-off tooling are being created. For example, GatsbyJS, a static site generated built on React and the react model.

To put this into perspective we will look at three of the big ones, React, Vue and Angular.

Slide 60

If we look at the npm downloads of the three over the first half of 2018 we see that React was downloaded over 55 million times, Angular core, the main package of Angular next, over 18 million tomes and both Angular 1 and Vue more than 8 million times each.

Of course every download cannot be related to a new app being created, but the vast number suggest how many developers are using these technologies. Developers who can either build their sites accessibly or inaccessibly.

The uncumfortable truth at the moment is that the second one is winning by far. In fact WebAIM saw a 60% rise in accessibility issues found in the Alexa Top 100 website's home pages in the space of five years.

Slide 61

Here we see the growth in downloads of these three since 2016. React and new Angular have pretty much skyrocketed with Vue steadily growing.

This gives a clear indication of the adoption rate of these three. A force to be reckoned with.

Of but are we talking hobby sites here or what?

Slide 62

Who uses React then? Facebook, NPM, AirBNB, IMDb, Instagram, Netflix, Paypal, Pinterest, Reddit, Twitter Mobile, Udemy, Vevo, Walmart, Wix, Workpress Gutenberg, Yahoo and many, many more!

Slide 63

Who uses Vue?  Facebook, Netflix, Adobe, Alibaba, EuroNews, Grammarly, GitLab and growing fast!

Slide 64

Who uses Angular? GMail, Google Ads, Google Cloud, PayPal, Google Pay, FitBit, LEGO, ABC News, SanDisk, American Red Cross, UPS, The Guardian and lots more!

Slide 65:

And this is only going to increase!

These are major major players affecting a very large number of users out there. And some of these are even dictating the standards for developers.

Slide 66:

If we look at these number, imagine the impact we can have on accessibility as a whole by reaching these developers?

Or what if we can even help to make the info sources or the code itself more accessible?

How can we do this?

Slide 67:

Let's look at the current challenges framework developers are facing when it comes to building accessible sites with these tools.

Many of the examples in the documentation are inaccessible. New developers copy and paste these examples and therefore these examples spread like a plague in a vast number of code bases.

There is a serious lack of information on how to build accessibly in these tools. It is not enought to only have basic static HTML and vanilla JavaScript examples as you bump into framework specific challenges when trying to apply these examples. Some will persevere, many won't.

There is also a serious lack of accessible UI components out there for the frameworks. Expecially newer frameworks. Developers will use something from NPM instead of building it themselves, and rightly so, but this once again spreads badly accessible UI components.

Accessibility can get very hard in real world applications. And I mean rediculously hard sometimes. Recently I spend a number of days with some colleagues just trying to find a semi durable solution to accessibly link an error message to a group of radio buttons or checkboxes. This is a common use case but the accessible examples accept static HTML with preselected radio buttons, for example.

Careless comments from those who reach many. A while ago a spoke at a React conference about accessibility. Amongst other things I mentioned the need for semantic HTML. Almost the next day one of the major speakers tweeted that no one could convince him not to build everything with div's and spans. If only those with the reach will talk about inclusive design.

How can we address these?

Slide 68:

Inaccessible doc examples. Here I propose that we submit PR's intead of just saying something is wrong. If we know that a specific example is wrong we already know why. Submit a PR to the docs and get that example changed. The more people actively changing the docs the more likely it is to become accessible.

Slide 69:

Lack of articles on accessibility in Frameworks. We need framework specific articles on solving accessibility problems. For example Heydon Pickering's website, Inclusive Components. Here he goes and solves some issue using React. This is vital. That developers can see solutions in their "native languages"  so to speak. So let's show how things can be fixed in our posts and let's step out of comfort zones and use other technologies. We need to translate our accessibility knowlegde into a language other developers can understand.

Slide 70

Lack of accessible UI components. It takes an incredible amount of effort to build a fully functional components library. So we need everyone to help. Help by giving your knowledge to library builders. Or if you can, develop those components.

Slide 71

When I was younger I did martial arts. One day I asked my sensei, why is this so hard. And his response was "I it was easy everyone would already be doing it."

Accessibility can get really hard in JS apps. Perhaps we are saying to quickly that accessibility is easy. We THINK it is easy because we re-use our patterns and forget how hard it was to learn and then we set developers up with a false hope. When they realise how hard it can be they can end up rejecting out further advice and accessibility in totality

No let's rather be honest about this. Tell people that there are challenges and point towards ways to solve it or examples.

Slide 72

About careless comments from those who reach many. There is no way to change this without actualyl reaching these individuals. It is a challenge we need to accept, sadly. But new leaders appear every day. And if they got there learning the benefits of accessibility they will bring this with them. So once again, reaching the developers on their terms only has benefits for current problems as well as the future.

Slide 73

So let me put my money where my mouth is!

Slide 74

There are many reasons I enjoy working with these frameworks.

For one they make me more productive and that is a good feeling.

They also lead to cleaner code bases because I can avoid copy and pasting and just re-use already written code in a sane way.

They make testing a LOT easier. Front end testing has come a long way in the last few years and being able to compartimentalize my code a lot better means that unit testing also get a lot easier. Because the front end can be the wild west when it comes to testing. And easier testing means a greater chance that it will actually happen which lead to more maintainable less breakable code.

And finally they are just fun to work with. Thankfully we are as varied as developers as people are in general and each developer can find the mode they want to work best in. And having choice in technology supports this.

Slide 75

I stronly believe that there is no separation between coding and accessibility. You just code accessible code so that means that each one of these points should also apply here.

Therefore something that increases your productivity will increase your accessibility productivity.

If we build accessible compartments of code, re-using these will automatically re-use good accessibility logic.

Testing these compartments for accessibility will then mean the same gain in testing coverage and speed of testing for accessibility features when using these technologies.

And even as an accessibility fan I still dont want to constantly rewrite the same code over and over again so it certainly makes accessibility more fun to work with, especially when I can encapsulate the more complex challenges.

Slide 76

I also believe that it can increase the chance that an entire application will be accessible. That is because if you start off by building an application with accessible building blocks it must increases that chance.

It will never guaruntee that the result is accessible, and will never be a replacement for accessibility knowledge but if you start building an application with inaccessible building blocks it will definitely ensure that your application is inaccessible.

By encapsulating base accessibility concerns in these re-usable blocks you allow the developer to focus on the rest of the application.

Slide 77

So meet Tenon-UI. A new library of accessible react components we are building at Tenon. At tenon we embrace technology, as long as it does not stand in the way of accessibility. So while it is still in it's infant stage, this library is something we will use ourselves in our own applications, while meeting our own accessibility standards. All wrapped up in an NPM package for developers out there.

Slide 78

As an example I will have a brief look at our accessible WAI ARIA tabbed interface. These controls are notouriously badly implemented on the web. And there are just so many flavours out there.

Slide 79

What is required for such a control?

Well according to the ARIA design patterns specification it needs to tell people that it is tabbed interface by applying the correct roles such a tablist, tab and tabpanel on the correct elements. It needs to let people know that a tab is selected with aria-selected. Only the selected tab should be in the focus order of the browser so we need to implement rolling tabindex. It should also allow naviation using the arrow keys and finally it should be easy to reach the content of the tab panel.

Slide 80

So what does a developer find when going to the official documentation? Going to the official W3C document gives a javascript file with 255 lines of code. In vanilla JS. That a framework developer needs to go and translate.

Please, my purpose is not to denegrate this document. It is amazing that folk would take the time to put this together and it is utterly valuable, I am simply trying to illustrate what a component developer will be faced with.

Translating so much vanilla javascript takes a long time. With very good React skills and decent accessibility knowlegde and the help of expert colleagues it took me the best part of a week to get the Tabs right and properly accessible.

Slide 81

How about re-usability? Vanilla examples are usually focussed on specific bits of HTML on the page. When developing components the developer can and at some point will place more than one of the components on one page. So what if the developer translated the official example one to one?

Well we see that part of the example assumes only one tabbed interface on the page. While other code will operate on all tabs and tab panels. So aside from translation the developer now has to also recode the example.

And then, my humble apologies to the author of this part of the document. I really know that keeping docs actual is hard and sometimes impossible, but here it also shows the use of e.keyCode which is marked as deprecated in other docs of the W3C.

I once again want to stress that my goal is not to denegrate this document. But simply to show what I myself had to deal with on many occasions and why we so badly need these examples for frameworks.

Slide 82

Today we will not look into the details of the actual code as that is React specific, but what can happen if we take our magic wand and wave some React magic dust over the code?

Slide 83

Well we get a working tabbed interface. And please note that what you see on screen here is actual working React code. If you dig into the presentation later you will see it running in an iframe. React code can also easily be injected into HTML at any point, I was simply dealing with limitations of the presentation framework at this point.

But that said, lets have a look at it goooooo!

For the record the React version, including the view (as you code view in directly in JavaScript with JSX in react) comes to 257 lines of code.

That's smaller than the total vanilla version because React makes some things easier for you.

But lines of code should not be the total measure of a solution so lets look at how you use this thing:

Slide 84

That! Yes folks that! That is the actual code that you write when you use the React component. Fully declarative and you are able to inject any view you want into the tab panels.

Plus it even ensures that every ID generated to properly label the tabpanels are unique, no matter how many tabbed interfaces you use on a screen.

While all the code to ensure that it acts as an accessible tabbed interface is managed in the component. Codes once, tested once and accessible in every case.

This example should illustrate how much of the accessibility complexity can be encapsulated in a component and then easily re-used all over. I am not able to focus on the accessibility of the page itself, as I can trust that every instance of my tabbed interface will act as an accessible WAI-ARIA tabbed control.

I hope that this illustrate what we can achieve. And how these frameworks should not be considered the enemy but rather as powerful tools we can use power accessibility into the future.

Slide 85

So you want to know what makes this tabpanel tick? Well this is the cliffhanger of this talk. Keep your eye on the Tenon blog as we will soon publish a lot of info about this and other similar controls we are building.

Thank you for your time!




















 




